diff --git a/dist/src/types/YMap.d.ts b/dist/src/types/YMap.d.ts
index 00b8e8178827727172ed32930e6c76c1b1842f64..b8daa1898734caf05c2fe5807a98753978615e4d 100644
--- a/dist/src/types/YMap.d.ts
+++ b/dist/src/types/YMap.d.ts
@@ -1,9 +1,17 @@
+import { YEvent } from "../utils/YEvent.js";
+import { Transaction } from "../utils/Transaction.js";
+import { AbstractType } from "./AbstractType.js";
+import { Doc } from "../utils/Doc.js";
+import { Item } from "../structs/Item.js";
+import { UpdateDecoderV1 } from "../utils/UpdateDecoder.js";
+import { UpdateDecoderV2 } from "../utils/UpdateDecoder.js";
+
 /**
  * @template T
  * @extends YEvent<YMap<T>>
  * Event that describes the changes on a YMap.
  */
-export class YMapEvent<T> extends YEvent<YMap<T>> {
+export class YMapEvent<T extends object> extends YEvent<YMap<T>> {
     /**
      * @param {YMap<T>} ymap The YArray that changed.
      * @param {Transaction} transaction
@@ -19,7 +27,7 @@ export class YMapEvent<T> extends YEvent<YMap<T>> {
  * @extends AbstractType<YMapEvent<MapType>>
  * @implements {Iterable<MapType>}
  */
-export class YMap<MapType> extends AbstractType<YMapEvent<MapType>> implements Iterable<MapType> {
+export class YMap<Data extends object = Record<string, unknown>> extends AbstractType<YMapEvent<Data>> implements Iterable<Data> {
     /**
      *
      * @param {Iterable<readonly [string, any]>=} entries - an optional iterable to initialize the YMap
@@ -45,7 +53,7 @@ export class YMap<MapType> extends AbstractType<YMapEvent<MapType>> implements I
     /**
      * @return {YMap<MapType>}
      */
-    clone(): YMap<MapType>;
+    clone(): YMap<Data>;
     /**
      * Transforms this Shared Type to a JSON object.
      *
@@ -83,7 +91,7 @@ export class YMap<MapType> extends AbstractType<YMapEvent<MapType>> implements I
      *
      * @param {function(MapType,string,YMap<MapType>):void} f A function to execute on every element of this YArray.
      */
-    forEach(f: (arg0: MapType, arg1: string, arg2: YMap<MapType>) => void): void;
+    forEach(f: (arg0: Data, arg1: string, arg2: YMap<Data>) => void): void;
     /**
      * Remove a specified element from this YMap.
      *
@@ -96,21 +104,21 @@ export class YMap<MapType> extends AbstractType<YMapEvent<MapType>> implements I
      * @param {string} key The key of the element to add to this YMap
      * @param {MapType} value The value of the element to add
      */
-    set(key: string, value: MapType): MapType;
+    set<Key extends keyof Data & string>(key: Key, value: Data[Key]): Data[Key];
     /**
      * Returns a specified element from this YMap.
      *
      * @param {string} key
      * @return {MapType|undefined}
      */
-    get(key: string): MapType | undefined;
+    get<Key extends keyof Data & string>(key: Key): Data[Key];
     /**
      * Returns a boolean indicating whether the specified key exists or not.
      *
      * @param {string} key The key to test.
      * @return {boolean}
      */
-    has(key: string): boolean;
+    has<Key extends keyof Data & string>(key: Key): boolean;
     /**
      * Removes all elements from this YMap.
      */
@@ -122,11 +130,5 @@ export class YMap<MapType> extends AbstractType<YMapEvent<MapType>> implements I
      */
     [Symbol.iterator](): IterableIterator<any>;
 }
+
 export function readYMap(decoder: UpdateDecoderV1 | UpdateDecoderV2): YMap<any>;
-import { YEvent } from "../utils/YEvent.js";
-import { Transaction } from "../utils/Transaction.js";
-import { AbstractType } from "./AbstractType.js";
-import { Doc } from "../utils/Doc.js";
-import { Item } from "../structs/Item.js";
-import { UpdateDecoderV1 } from "../utils/UpdateDecoder.js";
-import { UpdateDecoderV2 } from "../utils/UpdateDecoder.js";
diff --git a/dist/src/utils/Doc.d.ts b/dist/src/utils/Doc.d.ts
index fd83b70c2db35b93609102c7832e9d30c77c9267..323e686a8a20ec167867d4745077a01d17b7a0a2 100644
--- a/dist/src/utils/Doc.d.ts
+++ b/dist/src/utils/Doc.d.ts
@@ -1,3 +1,14 @@
+import * as random from "lib0/random";
+import { Observable } from "lib0/observable";
+import { Item } from "../structs/Item.js";
+import { AbstractType } from "../types/AbstractType.js";
+import { YEvent } from "./YEvent.js";
+import { StructStore } from "./StructStore.js";
+import { Transaction } from "./Transaction.js";
+import { YArray } from "../types/YArray.js";
+import { YText } from "../types/YText.js";
+import { YMap } from "../types/YMap.js";
+
 export const generateNewClientId: typeof random.uint32;
 /**
  * @typedef {Object} DocOpts
@@ -13,7 +24,7 @@ export const generateNewClientId: typeof random.uint32;
  * A Yjs instance handles the state of shared data.
  * @extends Observable<string>
  */
-export class Doc extends Observable<string> {
+export class Doc<Data extends Record<string, AbstractType<any>> = Record<string, AbstractType<any>>> extends Observable<string> {
     /**
      * @param {DocOpts} [opts] configuration
      */
@@ -72,33 +83,6 @@ export class Doc extends Observable<string> {
      * @public
      */
     public transact(f: (arg0: Transaction) => void, origin?: any): void;
-    /**
-     * Define a shared data type.
-     *
-     * Multiple calls of `y.get(name, TypeConstructor)` yield the same result
-     * and do not overwrite each other. I.e.
-     * `y.define(name, Y.Array) === y.define(name, Y.Array)`
-     *
-     * After this method is called, the type is also available on `y.share.get(name)`.
-     *
-     * *Best Practices:*
-     * Define all types right after the Yjs instance is created and store them in a separate object.
-     * Also use the typed methods `getText(name)`, `getArray(name)`, ..
-     *
-     * @example
-     *   const y = new Y(..)
-     *   const appState = {
-     *     document: y.getText('document')
-     *     comments: y.getArray('comments')
-     *   }
-     *
-     * @param {string} name
-     * @param {Function} TypeConstructor The constructor of the type definition. E.g. Y.Text, Y.Array, Y.Map, ...
-     * @return {AbstractType<any>} The created type. Constructed with TypeConstructor
-     *
-     * @public
-     */
-    public get(name: string, TypeConstructor?: Function): AbstractType<any>;
     /**
      * @template T
      * @param {string} [name]
@@ -106,14 +90,14 @@ export class Doc extends Observable<string> {
      *
      * @public
      */
-    public getArray<T>(name?: string | undefined): YArray<T>;
+    public getArray<Key extends keyof Data & string>(name: Key): Data[Key] extends YArray<any> ? Data[Key] : never;
     /**
      * @param {string} [name]
      * @return {YText}
      *
      * @public
      */
-    public getText(name?: string | undefined): YText;
+    public getText<Key extends keyof Data & string>(name: Key): Data[Key] extends YText ? Data[Key] : never;
     /**
      * @template T
      * @param {string} [name]
@@ -121,30 +105,14 @@ export class Doc extends Observable<string> {
      *
      * @public
      */
-    public getMap<T_1>(name?: string | undefined): YMap<T_1>;
-    /**
-     * @param {string} [name]
-     * @return {YXmlFragment}
-     *
-     * @public
-     */
-    public getXmlFragment(name?: string | undefined): YXmlFragment;
-    /**
-     * Converts the entire document into a js object, recursively traversing each yjs type
-     * Doesn't log types that have not been defined (using ydoc.getType(..)).
-     *
-     * @deprecated Do not use this method and rather call toJSON directly on the shared types.
-     *
-     * @return {Object<string, any>}
-     */
-    toJSON(): {
-        [x: string]: any;
-    };
+    public getMap<Key extends keyof Data & string>(name: Key): Data[Key] extends YMap<any> ? Data[Key] : never;
     /**
      * @param {string} eventName
      * @param {function(...any):any} f
      */
     on(eventName: string, f: (...args: any[]) => any): void;
+
+    toJSON(): Data;
 }
 export type DocOpts = {
     /**
@@ -176,14 +144,3 @@ export type DocOpts = {
      */
     shouldLoad?: boolean | undefined;
 };
\ No newline at end of file
-import * as random from "lib0/random";
-import { Observable } from "lib0/observable";
-import { Item } from "../structs/Item.js";
-import { AbstractType } from "../types/AbstractType.js";
-import { YEvent } from "./YEvent.js";
-import { StructStore } from "./StructStore.js";
-import { Transaction } from "./Transaction.js";
-import { YArray } from "../types/YArray.js";
-import { YText } from "../types/YText.js";
-import { YMap } from "../types/YMap.js";
-import { YXmlFragment } from "../types/YXmlFragment.js";